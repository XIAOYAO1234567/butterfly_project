suppressPackageStartupMessages({
  library(dplyr); library(readr); library(stringr); library(tidyr)
  library(GenomicRanges); library(ggplot2)
})

base_dir <- "~/Desktop/angsd_output_10kb_100kb"
tier1_file <- file.path(base_dir, "tier1_consensus_regions_10kb.tsv")
tier2_file <- file.path(base_dir, "tier2_supported_regions_10kb.tsv")
gff_file   <- file.path(base_dir, "GCF_947172395.1_ilBicAnyn1.1_genomic.gff")
outdir     <- file.path(base_dir, "func_annot_gff")
nearest_kb <- 20
dir.create(outdir, showWarnings = FALSE, recursive = TRUE)

canon_chr <- function(x) sub("\\.\\d+$","",sub("^chr","",as.character(x),ignore.case=TRUE))
canon_lab <- function(x){y<-tolower(trimws(as.character(x))); ifelse(grepl("sweep",y),"sweep", ifelse(grepl("balanc",y),"balancing","neutral"))}
pick_col <- function(x, ...) {nms<-tolower(names(x));cands<-tolower(c(...));for (nm in cands){i<-match(nm,nms);if(!is.na(i)) return(names(x)[i])};stop("Missing column")}
`%||%` <- function(a,b) if(!is.null(a) && !is.na(a) && a!="") a else b

pick_first_pref <- function(values, src, prefer = c("gene","mRNA")) {
  ord <- order(match(src, prefer), na.last = TRUE)
  v <- values[ord]
  v <- v[!is.na(v) & nzchar(v)]
  if (length(v)) v[[1]] else NA_character_
}

read_regions <- function(f){
  stopifnot(file.exists(f))
  x <- read_tsv(f, show_col_types = FALSE)
  CH <- pick_col(x, "chrom","seqid","CHROM")
  ST <- pick_col(x, "start","bin_start","START","begin")
  ED <- pick_col(x, "end","bin_end","END","stop")
  LB <- pick_col(x, "label","LABEL")
  x %>% transmute(CHROM=canon_chr(.data[[CH]]),
                  START=as.integer(.data[[ST]]),
                  END  =as.integer(.data[[ED]]),
                  LABEL=canon_lab(.data[[LB]])) %>%
    filter(LABEL %in% c("sweep","balancing"), START<=END)
}

parse_gff_genes <- function(gff){
  stopifnot(file.exists(gff))
  con <- file(gff,"r"); on.exit(close(con))
  rows <- list(); i <- 0L
  add <- function(gene,chrom,s,e,src,A){
    if(is.na(gene)||gene=="") return()
    i<<-i+1L; rows[[i]]<<-list(
      GENE=gene, CHROM=canon_chr(chrom), START=as.integer(s), END=as.integer(e), SRC=src,
      NAME=A[["Name"]] %||% A[["gene_name"]] %||% A[["gene"]],
      PRODUCT=A[["product"]] %||% A[["Product"]],
      NOTE=A[["note"]] %||% A[["Note"]],
      DBXREF=A[["Dbxref"]] %||% A[["db_xref"]],
      BIOTYPE=A[["gene_biotype"]] %||% A[["biotype"]]
    )
  }
  repeat{
    ln <- readLines(con, n=100000, warn=FALSE); if(length(ln)==0) break
    ln <- ln[!startsWith(ln,"#")]; if(!length(ln)) next
    for(p in strsplit(ln,"\t",fixed=TRUE)){
      if(length(p)<9) next
      attrs <- p[[9]]; A <- list()
      for(kv in strsplit(attrs,";",fixed=TRUE)[[1]]) if(nzchar(kv)&&grepl("=",kv)) {k<-sub("=.*$","",kv); v<-sub("^[^=]+=","",kv); A[[k]]<-v}
      if(p[[3]]=="gene"){
        gid <- A[["gene"]] %||% A[["gene_id"]] %||% A[["ID"]] %||% A[["Name"]]
        add(gid, p[[1]], p[[4]], p[[5]], "gene", A)
      } else if(p[[3]] %in% c("mRNA","transcript")){
        gid <- A[["Parent"]] %||% A[["gene"]] %||% A[["gene_id"]] %||% A[["Name"]]
        add(gid, p[[1]], p[[4]], p[[5]], "mRNA", A)
      }
    }
  }
  df <- bind_rows(rows)
  if(nrow(df)==0) stop("No gene/mRNA parsed from GFF.")
  
  df %>%
    group_by(GENE, CHROM) %>%
    summarise(
      START   = min(START,na.rm=TRUE),
      END     = max(END,na.rm=TRUE),
      NAME    = pick_first_pref(NAME,    SRC),
      PRODUCT = pick_first_pref(PRODUCT, SRC),
      NOTE    = pick_first_pref(NOTE,    SRC),
      DBXREF  = pick_first_pref(DBXREF,  SRC),
      BIOTYPE = pick_first_pref(BIOTYPE, SRC),
      .groups="drop"
    ) %>%
    filter(!is.na(START), !is.na(END), START<=END)
}

regions_to_genes <- function(reg, genes, nearest_kb=0){
  if(nrow(reg)==0||nrow(genes)==0) return(tibble())
  gr_reg <- GRanges(reg$CHROM, IRanges(reg$START, reg$END))
  gr_gen <- GRanges(genes$CHROM, IRanges(genes$START, genes$END))
  ov <- findOverlaps(gr_reg, gr_gen)
  res <- tibble(CHROM=reg$CHROM[queryHits(ov)], R_START=reg$START[queryHits(ov)], R_END=reg$END[queryHits(ov)],
                LABEL=reg$LABEL[queryHits(ov)], GENE=genes$GENE[subjectHits(ov)])
  if(nearest_kb>0){
    has <- unique(queryHits(ov)); miss <- setdiff(seq_along(gr_reg), has)
    if(length(miss)>0){
      nn <- suppressWarnings(nearest(gr_reg[miss], gr_gen, select="arbitrary"))
      ok <- !is.na(nn)
      if(any(ok)){
        d <- distance(gr_reg[miss][ok], gr_gen[nn[ok]])
        within <- which(d <= nearest_kb*1000)
        if(length(within)>0){
          add <- tibble(
            CHROM=as.character(seqnames(gr_reg[miss][ok][within])),
            R_START=start(gr_reg[miss][ok][within]),
            R_END=end(gr_reg[miss][ok][within]),
            LABEL=reg$LABEL[miss][ok][within],
            GENE=genes$GENE[nn[ok][within]]
          )
          res <- bind_rows(res, add)
        }
      }
    }
  }
  distinct(res)
}

cat_patterns <- list(
  Olfaction   = "(olfactory|odorant\\s*receptor|odorant-binding|\\bOBP\\b|chemosens|gustatory\\s*receptor|\\bGR\\b|ionotropic\\s*receptor|\\bIR\\b)",
  Detox       = "(cytochrome\\s*p450|\\bCYP\\d+|glutathione|\\bGST\\b|esterase|carboxylesterase|abc\\s*transporter|\\bAB[CBG]\\b|udp-?glycosyltransferase|\\bUGT\\b)",
  Pigmentation= "(melanin|tyrosinase|yellow\\b|ebony\\b|tan\\b|ommochrome|pteridine|pigment|opsin|rhodopsin)",
  Immunity    = "(defensin|antimicrobial|c-?type\\s*lectin|\\bTLR\\b|toll\\b|imd\\b|phenoloxidase|serine\\s*protease|immune)",
  Neuro       = "(synap|neuro|glutamate|gaba|dopamine|serotonin|acetylcholine|neuropeptide)",
  Development = "(homeobox|\\bHOX\\b|hedgehog|wingless|\\bWnt\\b|Notch|BMP\\b|TGF-?b|ecdysone|juvenile\\s*hormone)",
  TF          = "(transcription\\s*factor|zinc\\s*finger|\\bbHLH\\b|\\bbZIP\\b|homeodomain|forkhead|\\bGATA\\b)",
  IonChannel  = "(channel|\\bTRP\\b|voltage-?gated|potassium\\s*channel|sodium\\s*channel|calcium\\s*channel)",
  Signaling   = "(kinase|phosphatase|MAPK|JAK|STAT|PI3K|AKT|PKC|PKA|RAS\\b|RAF\\b|MEK\\b|ERK\\b)",
  Metabolism  = "(dehydrogenase|oxidoreductase|transferase|lipase|glycolysis|beta-?oxidation|mitochondrial|ATP\\s*synthase)",
  Transport   = "(transporter|solute\\s*carrier|\\bSLC\\b|aquaporin|v-?ATPase)",
  Reproduction= "(vitellogenin|sperm|oogenesis|testis|ovary|chorion|reproductive)",
  Cuticle     = "(cuticle|chitin|chitinase|cuticular\\s*protein)",
  Stress      = "(heat\\s*shock|\\bHSP\\d+|oxidative\\s*stress|superoxide\\s*dismutase|catalase|peroxidase)"
)
annotate_categories <- function(df){
  if(nrow(df)==0) return(df %>% mutate(CATEGORIES=NA_character_, PRIMARY_CAT=NA_character_))
  txt <- tolower(paste(df$NAME, df$PRODUCT, df$NOTE, df$DBXREF, sep="; "))
  cats <- lapply(txt, function(s){
    hit <- names(cat_patterns)[vapply(cat_patterns, function(p) grepl(p, s, perl=TRUE), logical(1))]
    if(length(hit)==0) NA_character_ else paste(unique(hit), collapse=";")
  })
  prim <- vapply(cats, function(z) if(is.na(z)) NA_character_ else strsplit(z,";")[[1]][1], character(1))
  df %>% mutate(CATEGORIES=unlist(cats), PRIMARY_CAT=prim)
}
make_barplot <- function(tab, title, filebase){
  if(nrow(tab)==0) return(invisible(NULL))
  p <- ggplot(tab, aes(x=reorder(Category, Count), y=Count, fill=LABEL)) +
    geom_col(position="dodge") + coord_flip() +
    labs(title=title, x=NULL, y="Gene count") + theme_minimal(base_size=12)
  ggsave(file.path(outdir, paste0(filebase,".pdf")), p, width=7, height=5)
  ggsave(file.path(outdir, paste0(filebase,".png")), p, width=7, height=5, dpi=300)
}

message("Reading regions & GFF ...")
reg1 <- read_regions(tier1_file); reg2 <- read_regions(tier2_file)
genes <- parse_gff_genes(gff_file)

message("Mapping regions to genes ...")
map1 <- regions_to_genes(reg1, genes, nearest_kb = nearest_kb)
map2 <- regions_to_genes(reg2, genes, nearest_kb = nearest_kb)

annot <- genes %>% select(GENE, NAME, PRODUCT, NOTE, DBXREF, BIOTYPE)
t1 <- map1 %>% left_join(annot, by="GENE") %>% mutate(REGION=paste(CHROM, R_START, R_END, sep=":"))
t2 <- map2 %>% left_join(annot, by="GENE") %>% mutate(REGION=paste(CHROM, R_START, R_END, sep=":"))

t1c <- annotate_categories(t1); t2c <- annotate_categories(t2)
write_tsv(t1c, file.path(outdir, "Tier1_region_gene_annotations.tsv"))
write_tsv(t2c, file.path(outdir, "Tier2_region_gene_annotations.tsv"))

count_cats <- function(df) df %>% filter(!is.na(PRIMARY_CAT)) %>% count(LABEL, Category=PRIMARY_CAT, name="Count") %>% arrange(desc(Count))
t1_counts <- count_cats(t1c); t2_counts <- count_cats(t2c)
write_tsv(t1_counts, file.path(outdir, "Tier1_category_counts.tsv"))
write_tsv(t2_counts, file.path(outdir, "Tier2_category_counts.tsv"))
if(nrow(t1_counts)>0) make_barplot(t1_counts, "Functional categories (Tier-1, GFF-derived)", "Tier1_categories")
if(nrow(t2_counts)>0) make_barplot(t2_counts, "Functional categories (Tier-2, GFF-derived)", "Tier2_categories")

rep_pick <- function(df, per_cat=3) df %>% filter(!is.na(PRIMARY_CAT)) %>% group_by(LABEL, PRIMARY_CAT) %>% slice_head(n=per_cat) %>%
  ungroup() %>% select(LABEL, PRIMARY_CAT, GENE, NAME, PRODUCT, REGION)
write_tsv(rep_pick(t1c,3), file.path(outdir,"Tier1_representative_genes_per_category.tsv"))
write_tsv(rep_pick(t2c,3), file.path(outdir,"Tier2_representative_genes_per_category.tsv"))

summary_txt <- tibble(
  item=c("Tier1_regions","Tier1_genes","Tier2_regions","Tier2_genes"),
  value=c(n_distinct(t1c$REGION), n_distinct(t1c$GENE), n_distinct(t2c$REGION), n_distinct(t2c$GENE))
)
write_tsv(summary_txt, file.path(outdir, "summary_counts.tsv"))

cat("Done.\nOutputs in: ", outdir, "\n")
