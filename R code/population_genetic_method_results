# ===============================
# 10 kb windows: flags, labels, blacklist, plots
# ===============================

# --- Packages ---
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(GenomicRanges)
library(gridExtra)

# --- Inputs / outputs ---
theta_file   <- "theta.10kb.pestPG"
coverage_dir <- "~/Desktop/coverage_output_chrwise_10kb"
outdir       <- "angsd_pi_tajima_plots_10kb"
dir.create(outdir, showWarnings = FALSE, recursive = TRUE)

# Coverage & SNP thresholds
cov_q    <- 0.05   # coverage low threshold = 5th percentile
by_chrom <- TRUE   # compute coverage thresholds per chromosome (more robust)

# Optional SNP-per-window file.
# Supported columns, either:
#   (A) CHROM, START, END, SNP_COUNT   [bed 0-based]
#   (B) CHROM, BIN_START, BIN_END, SNP_COUNT   [1-based]
snp_count_file <- NULL   # e.g. "snp_counts_10kb.tsv"
snp_min        <- 20     # windows with < snp_min SNPs are "LOW_SNP"

# --- Load ANGSD theta (10 kb) ---
theta_df <- read_tsv(theta_file, comment = "#", col_names = FALSE)
colnames(theta_df)[1:14] <- c(
  "Region", "CHROM", "WinCenter", "tW", "tP", "tF", "tH", "tL",
  "Tajima", "tajima2", "tajima3", "misc1", "misc2", "nSites"
)

theta_df <- theta_df %>%
  mutate(
    WinCenter = as.numeric(WinCenter),
    tP        = as.numeric(tP),
    nSites    = as.numeric(nSites),
    Tajima    = as.numeric(Tajima),
    pi        = tP / nSites,
    tajimaD   = Tajima,
    BIN_START = WinCenter - 5000 + 1,   # 1-based
    BIN_END   = WinCenter + 5000,
    PI        = pi
  ) %>%
  filter(!is.na(PI), !is.na(tajimaD), !is.na(nSites)) %>%
  mutate(REGION = paste0(CHROM, ":", BIN_START, "-", BIN_END))

# --- Load coverage .bed (10 kb windows) ---
coverage_files <- list.files(
  path       = coverage_dir,
  pattern    = "\\.bed$",
  full.names = TRUE,
  recursive  = TRUE
)

stopifnot(length(coverage_files) > 0)

coverage_all <- coverage_files %>%
  lapply(read_tsv, col_names = c("CHROM", "START", "END", "COV"), show_col_types = FALSE) %>%
  bind_rows() %>%
  mutate(
    BIN_START = as.numeric(START) + 1,  # bed 0-based --> 1-based
    BIN_END   = as.numeric(END)
  ) %>%
  group_by(CHROM, BIN_START, BIN_END) %>%
  summarise(COV = mean(as.numeric(COV), na.rm = TRUE), .groups = "drop")

# --- Merge theta + coverage ---
theta_cov <- theta_df %>%
  left_join(coverage_all, by = c("CHROM", "BIN_START", "BIN_END"))

# --- Genome-wide quantiles (for plotting bands/flags) ---
pi_low   <- quantile(theta_cov$PI,      0.05, na.rm = TRUE)
pi_high  <- quantile(theta_cov$PI,      0.95, na.rm = TRUE)
td_low   <- quantile(theta_cov$tajimaD, 0.05, na.rm = TRUE)
td_high  <- quantile(theta_cov$tajimaD, 0.95, na.rm = TRUE)
cov_low  <- quantile(theta_cov$COV,     cov_q, na.rm = TRUE)
cov_high <- quantile(theta_cov$COV,     0.99,  na.rm = TRUE)

# --- PI/TD flags (double-low, double-high) ---
theta_cov <- theta_cov %>%
  mutate(
    flag_pi = case_when(
      PI > pi_high ~ "pi_high",
      PI < pi_low  ~ "pi_low",
      TRUE         ~ "none"
    ),
    flag_td = case_when(
      tajimaD > td_high ~ "td_high",
      tajimaD < td_low  ~ "td_low",
      TRUE              ~ "none"
    ),
    overlap_flag = case_when(
      flag_pi == "pi_high" & flag_td == "td_high" ~ "both_high",
      flag_pi == "pi_low"  & flag_td == "td_low"  ~ "both_low",
      TRUE                                         ~ "none"
    )
  )

# --- Coverage low flags (per-chrom or global) ---
if (by_chrom) {
  theta_cov <- theta_cov %>%
    group_by(CHROM) %>%
    mutate(
      cov_low_thr  = quantile(COV, cov_q, na.rm = TRUE),
      cov_high_thr = quantile(COV, 1 - cov_q, na.rm = TRUE),
      COV_Z        = (COV - mean(COV, na.rm = TRUE)) / sd(COV, na.rm = TRUE),
      LOW_COV      = if_else(!is.na(COV) & COV < cov_low_thr, TRUE, FALSE)
    ) %>%
    ungroup()
} else {
  cov_low_thr_global  <- quantile(theta_cov$COV, cov_q, na.rm = TRUE)
  cov_high_thr_global <- quantile(theta_cov$COV, 1 - cov_q, na.rm = TRUE)
  mu_cov <- mean(theta_cov$COV, na.rm = TRUE)
  sd_cov <- sd(theta_cov$COV, na.rm = TRUE)
  theta_cov <- theta_cov %>%
    mutate(
      cov_low_thr  = cov_low_thr_global,
      cov_high_thr = cov_high_thr_global,
      COV_Z        = (COV - mu_cov) / sd_cov,
      LOW_COV      = if_else(!is.na(COV) & COV < cov_low_thr_global, TRUE, FALSE)
    )
}

# --- Optional: merge per-window SNP count and flag LOW_SNP ---
if (!is.null(snp_count_file)) {
  snp_df <- read_tsv(snp_count_file, show_col_types = FALSE)
  names_lower <- tolower(names(snp_df))
  if (all(c("chrom","start","end","snp_count") %in% names_lower)) {
    snp_df <- snp_df %>%
      rename_with(~tolower(.x)) %>%
      mutate(
        BIN_START = as.numeric(start) + 1,  # bed 0-based to 1-based
        BIN_END   = as.numeric(end)
      ) %>%
      select(CHROM = chrom, BIN_START, BIN_END, SNP_COUNT = snp_count)
  } else if (all(c("chrom","bin_start","bin_end","snp_count") %in% names_lower)) {
    snp_df <- snp_df %>%
      rename_with(~tolower(.x)) %>%
      select(CHROM = chrom, BIN_START = bin_start, BIN_END = bin_end, SNP_COUNT = snp_count)
  } else {
    stop("Unrecognized SNP file columns. Expect either CHROM/START/END/SNP_COUNT or CHROM/BIN_START/BIN_END/SNP_COUNT.")
  }
  
  theta_cov <- theta_cov %>%
    left_join(snp_df, by = c("CHROM","BIN_START","BIN_END")) %>%
    mutate(LOW_SNP = if_else(!is.na(SNP_COUNT) & SNP_COUNT < snp_min, TRUE, FALSE))
} else {
  theta_cov <- theta_cov %>%
    mutate(SNP_COUNT = NA_integer_, LOW_SNP = NA)
}

# --- FINAL LABEL per window (requested logic) ---
# sweep      = double-low (both_low)
# balancing  = high TD OR double-high (td_high OR both_high)
# neutral    = everything else
theta_cov <- theta_cov %>%
  mutate(
    label = case_when(
      overlap_flag == "both_low"                           ~ "sweep",
      flag_td == "td_high" | overlap_flag == "both_high"   ~ "balancing",
      TRUE                                                 ~ "neutral"
    )
  )

# --- TABLE #1: full window table + label (write once) ---
window_table <- theta_cov %>%
  transmute(
    CHROM, BIN_START, BIN_END, REGION,
    COV, cov_low_thr, cov_high_thr, COV_Z, LOW_COV,
    SNP_COUNT, LOW_SNP,
    PI, tajimaD, nSites,
    flag_pi, flag_td, overlap_flag,
    label
  )

out_windows <- file.path(outdir, "window_flags_10kb_labeled.tsv")
write_tsv(window_table, out_windows)
message("Saved window table with labels: ", out_windows)

# --- TABLE #2: unified blacklist (merged LOW_COV and/or LOW_SNP) ---
blk_windows <- window_table %>%
  filter(LOW_COV %in% TRUE | LOW_SNP %in% TRUE)

if (nrow(blk_windows) > 0) {
  gr_blk <- with(blk_windows,
                 GRanges(seqnames = CHROM, ranges = IRanges(start = BIN_START, end = BIN_END)))
  gr_blk_merged <- reduce(gr_blk)
  
  # Summarize reasons and counts per merged region
  blacklist_df <- data.frame(
    CHROM = as.character(seqnames(gr_blk_merged)),
    START = start(gr_blk_merged),
    END   = end(gr_blk_merged)
  ) %>%
    rowwise() %>%
    mutate(
      N_WINDOWS    = sum(window_table$CHROM == CHROM &
                           window_table$BIN_START >= START &
                           window_table$BIN_END   <= END),
      N_LOW_COV    = sum(window_table$CHROM == CHROM &
                           window_table$BIN_START >= START &
                           window_table$BIN_END   <= END &
                           window_table$LOW_COV %in% TRUE, na.rm = TRUE),
      N_LOW_SNP    = sum(window_table$CHROM == CHROM &
                           window_table$BIN_START >= START &
                           window_table$BIN_END   <= END &
                           window_table$LOW_SNP %in% TRUE, na.rm = TRUE),
      REASON       = case_when(
        N_LOW_COV > 0 & N_LOW_SNP > 0 ~ "low_coverage+low_snp",
        N_LOW_COV > 0                 ~ "low_coverage",
        N_LOW_SNP > 0                 ~ "low_snp",
        TRUE                          ~ "unknown"
      ),
      SPAN_KB      = round((END - START + 1) / 1000, 1)
    ) %>%
    ungroup() %>%
    arrange(CHROM, START)
  
  out_blacklist <- file.path(outdir, "blacklist_regions_10kb.tsv")
  write_tsv(blacklist_df, out_blacklist)
  message("Saved unified blacklist: ", out_blacklist)
} else {
  out_blacklist <- file.path(outdir, "blacklist_regions_10kb.tsv")
  write_tsv(tibble(CHROM=character(), START=integer(), END=integer(),
                   N_WINDOWS=integer(), N_LOW_COV=integer(), N_LOW_SNP=integer(),
                   REASON=character(), SPAN_KB=double()),
            out_blacklist)
  message("No windows flagged LOW_COV/LOW_SNP; wrote empty blacklist: ", out_blacklist)
}

# --- PLOTS (PDF) ---
chroms <- unique(theta_cov$CHROM)
pdf(file.path(outdir, "angsd_pi_tajima_plots_10kb.pdf"), width = 10, height = 12)

# 1) Genome-wide scatter
print(
  ggplot(theta_cov, aes(x = PI, y = tajimaD)) +
    geom_point(color = "grey60", size = 1, alpha = 0.5) +
    geom_point(data = filter(theta_cov, overlap_flag == "both_high"),
               color = "red",  size = 2, shape = 21, fill = "gold") +
    geom_point(data = filter(theta_cov, overlap_flag == "both_low"),
               color = "blue", size = 2, shape = 21, fill = "deepskyblue") +
    labs(title = "Genome-wide π vs Tajima's D (10 kb)",
         x = expression(pi), y = "Tajima's D") +
    theme_minimal()
)

# 2) Histograms
grid.arrange(
  ggplot(theta_cov, aes(x = PI)) +
    geom_histogram(bins = 50, fill = "steelblue", color = "black") +
    geom_vline(xintercept = c(pi_low, pi_high), linetype = "dashed", color = c("blue","red")) +
    labs(title = "Histogram of π (10 kb)", x = expression(pi), y = "Count") +
    theme_minimal(),
  ggplot(theta_cov, aes(x = tajimaD)) +
    geom_histogram(bins = 50, fill = "tomato", color = "black") +
    geom_vline(xintercept = c(td_low, td_high), linetype = "dashed", color = c("blue","red")) +
    labs(title = "Histogram of Tajima's D (10 kb)", x = "Tajima's D", y = "Count") +
    theme_minimal(),
  ncol = 1
)

# 3) Genome-wide curves (stacked)
chr_offsets <- theta_cov %>%
  group_by(CHROM) %>%
  summarise(chr_len = max(BIN_END, na.rm = TRUE), .groups = "drop") %>%
  mutate(offset = cumsum(dplyr::lag(chr_len, default = 0)))

theta_cov <- theta_cov %>%
  left_join(chr_offsets, by = "CHROM") %>%
  mutate(GLOBAL_POS = BIN_START + offset)

p_pi_global <- ggplot(theta_cov, aes(x = GLOBAL_POS, y = PI)) +
  geom_line(color = "steelblue") +
  geom_hline(yintercept = c(pi_low, pi_high), linetype = "dashed", color = c("blue","red")) +
  labs(title = "Genome-wide π (10 kb)", x = "Genomic position", y = expression(pi)) +
  theme_minimal()

p_td_global <- ggplot(theta_cov, aes(x = GLOBAL_POS, y = tajimaD)) +
  geom_line(color = "tomato") +
  geom_hline(yintercept = c(td_low, td_high), linetype = "dashed", color = c("blue","red")) +
  labs(title = "Genome-wide Tajima's D (10 kb)", x = "Genomic position", y = "Tajima's D") +
  theme_minimal()

p_cov_global <- ggplot(theta_cov, aes(x = GLOBAL_POS, y = COV)) +
  geom_line(color = "darkgreen") +
  geom_hline(yintercept = c(cov_low, cov_high), linetype = "dashed", color = c("purple","darkgreen")) +
  labs(title = "Genome-wide Coverage (10 kb)", x = "Genomic position", y = "Coverage") +
  theme_minimal()

grid.arrange(p_pi_global, p_td_global, p_cov_global, ncol = 1)

# 4) Per-chromosome pages
for (chr in chroms) {
  df <- filter(theta_cov, CHROM == chr)
  
  p1 <- ggplot(df, aes(x = BIN_START, y = PI)) +
    geom_ribbon(aes(ymin = pi_low, ymax = pi_high), fill = "grey80", alpha = 0.4) +
    geom_line(color = "steelblue") +
    labs(title = paste("π |", chr), x = "Position", y = expression(pi)) +
    theme_minimal()
  
  p2 <- ggplot(df, aes(x = BIN_START, y = tajimaD)) +
    geom_ribbon(aes(ymin = td_low, ymax = td_high), fill = "grey80", alpha = 0.4) +
    geom_line(color = "tomato") +
    labs(title = paste("Tajima's D |", chr), x = "Position", y = "Tajima's D") +
    theme_minimal()
  
  p3 <- ggplot(df, aes(x = BIN_START, y = COV)) +
    geom_line(color = "darkgreen") +
    geom_hline(yintercept = c(cov_low, cov_high), linetype = "dashed", color = c("purple","darkgreen")) +
    labs(title = paste("Coverage |", chr), x = "Position", y = "Coverage") +
    theme_minimal()
  
  p4 <- ggplot(df, aes(x = PI, y = tajimaD)) +
    geom_point(color = "grey50", size = 1, alpha = 0.5) +
    geom_point(data = filter(df, overlap_flag == "both_high"),
               color = "red",  size = 2, shape = 21, fill = "gold") +
    geom_point(data = filter(df, overlap_flag == "both_low"),
               color = "blue", size = 2, shape = 21, fill = "deepskyblue") +
    labs(title = paste("π vs Tajima's D |", chr), x = expression(pi), y = "Tajima's D") +
    theme_minimal()
  
  grid.arrange(p1, p2, p3, p4, ncol = 1)
}
dev.off()

cat(
  "Done.\n",
  "Table #1 (windows + labels): ", out_windows, "\n",
  "Table #2 (blacklist):        ", out_blacklist, "\n",
  "Plots PDF:                   ", file.path(outdir, "angsd_pi_tajima_plots_10kb.pdf"), "\n"
)
